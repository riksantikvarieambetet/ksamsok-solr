<?xml version="1.0" encoding="UTF-8"?>
<project name="solr" basedir="." default="RAA-UTV-RPM">

    <description>
        Ant-buildfile, ksamsok - solr.
    </description>

    <target name="init">
        <tstamp/>
        <property environment="env"/>

        <property file="local.properties"/>
    	<property file="build.properties"/>

        <property name="project.build.dir" value="${basedir}/build"/>

        <property name="project.name" value="ksamsok-solr"/>
        <property name="project.version" value="${DSTAMP}"/>
        <property name="project.src.dir" value="${basedir}/src"/>
        <property name="project.src.lib.dir" value="${basedir}/lib"/>
        <property name="jar.name"
            value="${project.name}-${project.version}.jar"/>
        <property name="war.name"
            value="${project.name}-${project.version}.war"/>
        <property name="short.war.name"
            value="${project.name}.war"/>

        <property name="javac.debug" value="true"/>
        <property name="javac.optimize" value="true"/>

        <path id="project.classpath">
            <fileset dir="${project.src.lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </path>

        <fileset id="deploy.jars" dir="${project.src.lib.dir}">
        	<!-- add extra jar-files at this poin, if needed at deploy, 
        	those already existing in the lib dir,
        	should not be included in the solr.war -->
            <include name="" />
        </fileset>

		<!-- Configuration files -->
        <patternset id="conf.pattern">
        	<include name="**/*.properties"/>
        	<exclude name="unpackaged/**" />
        	<exclude name="lib/**" />
        	<exclude name="war/**" />
        </patternset>
        <fileset id="conf.files" dir="${project.src.dir}">
            <patternset id="conf.pattern" />
        </fileset>

    	<mkdir dir="${basedir}/src"/>
        <mkdir dir="${basedir}/lib"/>

    </target>

    <target name="compile" depends="init"
		description="Kompilerar java-klasser.">
        <mkdir dir="${project.build.dir}"/>
		<mkdir dir="${project.build.dir}/lib"/>
		<mkdir dir="${project.build.dir}/war"/>

    	<javac srcdir="${project.src.dir}"
            destdir="${project.build.dir}"
            classpathref="project.classpath"
            debug="${javac.debug}" 
            optimize="${javac.optimize}"
            encoding="UTF-8">
            <patternset>
                <include name="**/*.java"/>
            	<exclude name="**/*Test.java"/>
            </patternset>

        </javac>
    </target>

	<!-- Builds a JAR -->
	<target name="jar" depends="init,compile,conf-copy"
		description="Skapar en JAR.">
		<jar jarfile="${project.build.dir}/lib/${jar.name}"
			basedir="${project.build.dir}"
			update="false" duplicate="preserve" index="true" whenmanifestonly="skip">
			<patternset>
				<include name="**/*.class"/>
				<exclude name="unpackaged/**"/>
			</patternset>
			<patternset refid="conf.pattern" />
		</jar>
	</target>

	<!-- Builds a WAR -->
	<target name="war" depends="jar" description="Create a WAR for deployment och add it in log4j i.a.">
		<unwar dest="${project.build.dir}/unpacked">
			<fileset dir="${basedir}/solr">
				<include name="apache-solr-*.war"/>
			</fileset>
		</unwar>
		<delete verbose="true">
			<fileset dir="${project.build.dir}/unpacked/WEB-INF/lib">
				<exclude name="slf4j-api-*.jar" />
				<include name="slf4j-*.jar" />
			</fileset>
		</delete>
		<copy todir="${project.build.dir}/unpacked/WEB-INF/lib">
			<fileset dir="${basedir}/solr">
				<include name="slf4j-log4j*.jar"/>
				<include name="log4j-*.jar"/>
			</fileset>
		</copy>
		<delete file="${project.build.dir}/unpacked/WEB-INF/web.xml" verbose="true"/>
		<copy file="${basedir}/solr/web.xml" todir="${project.build.dir}/unpacked/WEB-INF"/>
		<copy file="${basedir}/solr/log4j.properties" todir="${project.build.dir}/unpacked/WEB-INF/classes" />
		<copy file="${basedir}/solr/context.xml" todir="${project.build.dir}/unpacked/META-INF/">
			<filterset>
				<filter token="SOLR_HOME" value="${solr.home}"/>
			</filterset>
		</copy>
		<echo>Copies the projects jar-file</echo>
		<copy todir="${project.build.dir}/unpacked/WEB-INF/lib">
			<fileset dir="${project.build.dir}/lib">
				<include name="${project.name}-*.jar"/>
			</fileset>
		</copy>
		<echo>Copies any extra jar-files</echo>
		<copy todir="${project.build.dir}/unpacked/WEB-INF/lib" verbose="true">
			<fileset refid="deploy.jars" />
		</copy>
		<war destfile="${project.build.dir}/war/solr.war" basedir="${project.build.dir}/unpacked" />

	</target>

	<target name="conf-copy" depends="init">
        <copy todir="${project.build.dir}" >
            <fileset refid="conf.files" />
        </copy>
    </target>

    <target name="build" depends="init" description="Builds.">
        <antcall target="compile"/>
        <antcall target="conf-copy"/>
    </target>

    <!--<target name="clean" depends="init"
        description="Removes the build catalogue.">
    	<mkdir dir="${project.build.dir}"/>
        <delete includeemptydirs="true" >
            <fileset dir="${project.build.dir}">
                <patternset>
                    <exclude name="*/*.rpm"/>
                </patternset>
            </fileset>
        </delete>
    </target>-->
	
	<target name="clean" description="Tar bort build-katalogen." depends="init,builddirexists" if="build.dir.present">
		<delete includeemptydirs="true">
		   	<fileset dir="${project.build.dir}">
		    </fileset>
		</delete>
	</target>
			
	<target name="builddirexists">
		<condition property="build.dir.present">
			<available file="${project.build.dir}" type="dir"/>
		</condition>
	</target>

    <target name="javadoc" depends="init"
		description="Generates javadoc.">
        <javadoc sourcepath="${project.src.dir}"
        	classpathref="project.classpath"
            destdir="${project.build.dir}/javadoc"
            packagenames="se.raa.ksamsok.*"
            defaultexcludes="yes"
            windowtitle="K-samsok-solr"
            access="package"
            use="true"
            >
        </javadoc>
    </target>

	<target name="replication-slave" depends="init">
		<property name="solr.slave" value="true"/>
	</target>
	
	<target name="replication-slave-test" depends="init">
			<property name="solr.slave" value="true"/>
			<property name="solr.slave.test" value="true"/>
	</target>
	
	<target name="updateSpecToSlave" if="solr.slave">
		<copy todir="${project.build.dir}/rpm/SPECS" file="rpm/ksamsok-solr.spec" overwrite="true">
			<filterset>
				<filter token="RPM_SUFFIX" value="slave"/>
			</filterset>
		</copy>
	</target>
	
	<target name="updateSolrConfToSlave" if="solr.slave">
		<copy todir="${project.build.dir}/rpm/SOURCES/" overwrite="true">
			<fileset dir="solr-home" />
			<filterset>
				<filter token="SOLR_REPLICATION" value="${solr.slave.conf}"/>
			</filterset>
		</copy>
	</target>
	<target name="updateSolrConfToSlaveTest" if="solr.slave.test">
		<copy todir="${project.build.dir}/rpm/SOURCES/" overwrite="true">
			<fileset dir="solr-home" />
			<filterset>
				<filter token="SOLR_REPLICATION" value="${solr.slave.test.conf}"/>
			</filterset>
		</copy>

	</target>

	<target name="base-RAA-RPM" depends="war">
		<!-- create RPM-structure -->
		<mkdir dir="${project.build.dir}/rpm/RPMS" />
		<mkdir dir="${project.build.dir}/rpm/SPECS" />
		<mkdir dir="${project.build.dir}/rpm/SOURCES" />
		<mkdir dir="${project.build.dir}/rpm/BUILD" />
		<mkdir dir="${project.build.dir}/rpm/SRPMS" />
		<mkdir dir="${project.build.dir}/rpm/INSTALL" />

		<copy todir="${project.build.dir}/rpm/SPECS" file="rpm/ksamsok-solr.spec">
			<filterset>
				<filter token="RPM_SUFFIX" value="master"/>
			</filterset>
		</copy>
		
		<antcall target="updateSpecToSlave"/>
		
		<!-- paste here to the structure used after install-->
		<copy todir="${project.build.dir}/rpm/SOURCES/">
			<fileset dir="${project.build.dir}/war">
				<include name="solr.war"/>
			</fileset>
		</copy>
		<copy todir="${project.build.dir}/rpm/SOURCES/">
			<fileset dir="solr-home" />
			<filterset>
				<filter token="SOLR_REPLICATION" value="${solr.master.conf}"/>
			</filterset>
		</copy>
		<antcall target="updateSolrConfToSlave"/>
		<antcall target="updateSolrConfToSlaveTest"/>
		<!-- Create the actual rpm-file -->
    	<echo message="${project.build.dir}"/>
		<rpm
			specFile="ksamsok-solr.spec"
		    topDir="${project.build.dir}/rpm"
		    cleanBuildDir="true"
		    failOnError="true"/>

    	<!-- Add the rpm-file in ${project.build.rpm.dir} -->
    	<copy todir="${project.build.dir}/rpm">
    		<fileset dir="${project.build.dir}/rpm/RPMS/x86_64">
    	    	<include name="*.rpm"/>
    	    </fileset>
    	</copy>

	</target>

	<!-- Bygger alltid en master och en slav rpm-->
	<target name="RAA-RPM" depends="init,base-RAA-RPM" description="Create rpm for raa:s operating environment">
		<!--Bygg en slav också-->
		<antcall target="RAA-RPM-SLAVE"/>
	</target>
	<target name="RAA-RPM-SLAVE" depends="replication-slave,base-RAA-RPM" description="Create rpm for raa:s operating environment">
	</target>

	<target name="RAA-UTV-RPM" depends="init,base-RAA-RPM" description="Create rpm for raa:s development environment, replicating slave">
		<!--Bygg en slav också-->
		<antcall target="RAA-UTV-RPM-SLAVE"/>
	</target>
	
	<target name="RAA-UTV-RPM-SLAVE" depends="replication-slave-test,base-RAA-RPM" description="Create rpm for raa:s development environment, replicating master">
	</target>

</project>
